[{"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\index.tsx":"1","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\serviceWorker.ts":"2","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\App.tsx":"3","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\components\\side-menu\\side-menu.tsx":"4","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\components\\main-menu\\main-menu.tsx":"5","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\pages\\backlog\\backlog-page.tsx":"6","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\dashboard\\pages\\dashboard\\dashboard-page.tsx":"7","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\pages\\detail\\detail-page.tsx":"8","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\services\\backlog.service.ts":"9","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\dashboard\\repositories\\dashboard.repository.ts":"10","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\helpers\\priority-styling.ts":"11","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\dashboard\\services\\dashboard.service.ts":"12","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\helpers\\date-utils.ts":"13","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\services\\pt-user-service.ts":"14","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\repositories\\backlog.repository.ts":"15","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\state\\app-store.ts":"16","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\components\\preset-filter\\preset-filter.tsx":"17","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\components\\item-details\\pt-item-details.tsx":"18","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\dashboard\\components\\active-issues\\active-issues.tsx":"19","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\components\\item-chitchat\\pt-item-chitchat.tsx":"20","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\components\\item-tasks\\pt-item-tasks.tsx":"21","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\constants\\index.ts":"22","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\helpers\\index.ts":"23","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\helpers\\user-avatar-helper.ts":"24","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\config.ts":"25","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\state\\app-state.ts":"26","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\models\\forms\\pt-item-details-edit-form.ts":"27","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\helpers\\string-helpers.ts":"28","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\constants\\pt-item-types.ts":"29","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\constants\\pt-item-statuses.ts":"30","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\models\\domain\\enums\\index.ts":"31","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\models\\domain\\enums\\item-type-enum.ts":"32","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\models\\domain\\enums\\item-status.enum.ts":"33","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\models\\domain\\enums\\item-priority.enum.ts":"34","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\constants\\pt-item-priorities.ts":"35"},{"size":494,"mtime":1651776943777,"results":"36","hashOfConfig":"37"},{"size":5198,"mtime":1651776943809,"results":"38","hashOfConfig":"37"},{"size":1866,"mtime":1651863526672,"results":"39","hashOfConfig":"37"},{"size":9503,"mtime":1651776943824,"results":"40","hashOfConfig":"37"},{"size":774,"mtime":1651776943809,"results":"41","hashOfConfig":"37"},{"size":8597,"mtime":1652059325775,"results":"42","hashOfConfig":"37"},{"size":4286,"mtime":1651863780895,"results":"43","hashOfConfig":"37"},{"size":7365,"mtime":1651776943793,"results":"44","hashOfConfig":"37"},{"size":7291,"mtime":1651776943793,"results":"45","hashOfConfig":"37"},{"size":2308,"mtime":1651776943809,"results":"46","hashOfConfig":"37"},{"size":486,"mtime":1651776943824,"results":"47","hashOfConfig":"37"},{"size":826,"mtime":1651776943809,"results":"48","hashOfConfig":"37"},{"size":784,"mtime":1651776943722,"results":"49","hashOfConfig":"37"},{"size":771,"mtime":1651776943771,"results":"50","hashOfConfig":"37"},{"size":4850,"mtime":1651776943793,"results":"51","hashOfConfig":"37"},{"size":635,"mtime":1651776943774,"results":"52","hashOfConfig":"37"},{"size":991,"mtime":1651776943824,"results":"53","hashOfConfig":"37"},{"size":8771,"mtime":1652075048563,"results":"54","hashOfConfig":"37"},{"size":2111,"mtime":1651776943793,"results":"55","hashOfConfig":"37"},{"size":3339,"mtime":1651776943785,"results":"56","hashOfConfig":"37"},{"size":4743,"mtime":1651776943790,"results":"57","hashOfConfig":"37"},{"size":107,"mtime":1651776943706,"results":"58","hashOfConfig":"37"},{"size":112,"mtime":1651776943722,"results":"59","hashOfConfig":"37"},{"size":119,"mtime":1651776943722,"results":"60","hashOfConfig":"37"},{"size":74,"mtime":1651776943706,"results":"61","hashOfConfig":"37"},{"size":598,"mtime":1651776943773,"results":"62","hashOfConfig":"37"},{"size":678,"mtime":1651776943824,"results":"63","hashOfConfig":"37"},{"size":32,"mtime":1651776943722,"results":"64","hashOfConfig":"37"},{"size":2439,"mtime":1651776943722,"results":"65","hashOfConfig":"37"},{"size":193,"mtime":1651776943722,"results":"66","hashOfConfig":"37"},{"size":108,"mtime":1651776943738,"results":"67","hashOfConfig":"37"},{"size":114,"mtime":1651776943745,"results":"68","hashOfConfig":"37"},{"size":125,"mtime":1651776943742,"results":"69","hashOfConfig":"37"},{"size":2143,"mtime":1651776943740,"results":"70","hashOfConfig":"37"},{"size":199,"mtime":1651776943706,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1si8owl",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\index.tsx",[],["149","150"],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\serviceWorker.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\App.tsx",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\components\\side-menu\\side-menu.tsx",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\components\\main-menu\\main-menu.tsx",["151","152","153"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\n\nexport class MainMenu extends React.PureComponent<any, any> {\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n                <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\">\n                    <img src=\"/assets/img/rpslogo.png\" className=\"logo\" />\n                </a>\n                <nav className=\"my-2 my-md-0 mr-md-3\">\n                    <Link className=\"p-2 text-light\" to=\"/dashboard\">Dashboard</Link>\n                    <Link className=\"p-2 text-light\" to=\"/backlog\">Backlog</Link>\n                </nav>\n            </div>\n        );\n    }\n};\n","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\pages\\backlog\\backlog-page.tsx",["154","155","156"],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\dashboard\\pages\\dashboard\\dashboard-page.tsx",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\pages\\detail\\detail-page.tsx",["157"],"import React from \"react\";\n\nimport { PtItem, PtUser, PtTask, PtComment } from \"../../../../core/models/domain\";\nimport { DetailScreenType } from \"../../../../shared/models/ui/types/detail-screens\";\nimport { Store } from \"../../../../core/state/app-store\";\nimport { BacklogRepository } from \"../../repositories/backlog.repository\";\nimport { BacklogService } from \"../../services/backlog.service\";\nimport { PtItemDetailsComponent } from \"../../components/item-details/pt-item-details\";\nimport { PtItemTasksComponent } from \"../../components/item-tasks/pt-item-tasks\";\n// import { debug } from \"util\";\nimport { PtUserService } from \"../../../../core/services/pt-user-service\";\nimport { Observable, BehaviorSubject } from \"rxjs\";\nimport { PtNewTask } from \"../../../../shared/models/dto/pt-new-task\";\nimport { PtTaskUpdate } from \"../../../../shared/models/dto/pt-task-update\";\nimport { PtItemChitchatComponent } from \"../../components/item-chitchat/pt-item-chitchat\";\nimport { PtNewComment } from \"../../../../shared/models/dto/pt-new-comment\";\n\ninterface DetailPageState {\n    item: PtItem | undefined;\n    selectedDetailsScreen: DetailScreenType;\n}\n\nexport class DetailPage extends React.Component<any, DetailPageState> {\n\n    private store: Store = new Store();\n    private backlogRepo: BacklogRepository = new BacklogRepository();\n    private backlogService: BacklogService = new BacklogService(this.backlogRepo, this.store);\n    private ptUserService: PtUserService = new PtUserService(this.store);\n\n    private itemId = 0;\n    private users$: Observable<PtUser[]> = this.store.select<PtUser[]>('users');\n    public tasks$: BehaviorSubject<PtTask[]> = new BehaviorSubject<PtTask[]>([]);\n    public comments$: BehaviorSubject<PtComment[]> = new BehaviorSubject<PtComment[]>([]);\n    public currentUser: PtUser | undefined;\n\n    private screenPositionMap: { [key in DetailScreenType | number]: number | DetailScreenType } = {\n        0: 'details',\n        1: 'tasks',\n        2: 'chitchat',\n        'details': 0,\n        'tasks': 1,\n        'chitchat': 2\n    };\n\n    constructor(props: any) {\n        super(props);\n\n        const { id, screen } = this.props.match.params;\n        this.itemId = id;\n        this.currentUser = this.store.value.currentUser;\n\n        this.state = {\n            item: undefined,\n            selectedDetailsScreen: screen ? screen : 'details'\n        };\n    }\n\n    public componentDidMount() {\n        this.refresh();\n    }\n\n    public componentDidUpdate(prevsProps: any, prevState: DetailPageState) {\n\n    }\n\n    private refresh() {\n        this.backlogService.getPtItem(this.itemId)\n            .then(item => {\n                this.setState({\n                    item: item\n                });\n                this.tasks$.next(item.tasks);\n                this.comments$.next(item.comments);\n            });\n    }\n\n    public onScreenSelected(screen: DetailScreenType) {\n        this.setState({\n            selectedDetailsScreen: screen\n        });\n        this.props.history.push(`/detail/${this.itemId}/${screen}`);\n    }\n\n    public onItemSaved(item: PtItem) {\n        this.backlogService.updatePtItem(item)\n            .then((updateItem: PtItem) => {\n                this.setState({\n                    item: updateItem\n                });\n            });\n    }\n\n    public onAddNewTask(newTask: PtNewTask) {\n        if (this.state.item) {\n            this.backlogService.addNewPtTask(newTask, this.state.item).then(nextTask => {\n                this.tasks$.next([nextTask].concat(this.tasks$.value));\n            });\n        }\n    }\n\n    public onUpdateTask(taskUpdate: PtTaskUpdate) {\n        if (this.state.item) {\n            if (taskUpdate.delete) {\n                this.backlogService.deletePtTask(this.state.item, taskUpdate.task).then(ok => {\n                    if (ok) {\n                        const newTasks = this.tasks$.value.filter(task => {\n                            if (task.id !== taskUpdate.task.id) {\n                                return task;\n                            }\n                        });\n                        this.tasks$.next(newTasks);\n                    }\n                });\n            } else {\n                this.backlogService.updatePtTask(this.state.item, taskUpdate.task, taskUpdate.toggle, taskUpdate.newTitle).then(updatedTask => {\n                    const newTasks = this.tasks$.value.map(task => {\n                        if (task.id === updatedTask.id) {\n                            return updatedTask;\n                        } else {\n                            return task;\n                        }\n                    });\n                    this.tasks$.next(newTasks);\n                });\n            }\n        }\n    }\n\n\n    public onAddNewComment(newComment: PtNewComment) {\n        if (this.state.item) {\n            this.backlogService.addNewPtComment(newComment, this.state.item).then(nextComment => {\n                this.comments$.next([nextComment].concat(this.comments$.value));\n            });\n        }\n    }\n\n    public onUsersRequested() {\n        this.ptUserService.fetchUsers();\n    }\n\n    private screenRender(screen: DetailScreenType, item: PtItem) {\n        switch (screen) {\n            case 'details':\n                return <PtItemDetailsComponent item={item} users$={this.users$} usersRequested={() => this.onUsersRequested()} itemSaved={(item) => this.onItemSaved(item)} />;\n            case 'tasks':\n                return <PtItemTasksComponent tasks$={this.tasks$} addNewTask={(newTask) => this.onAddNewTask(newTask)} updateTask={(taskUpdate) => this.onUpdateTask(taskUpdate)} />;\n            case 'chitchat':\n                return <PtItemChitchatComponent comments$={this.comments$} currentUser={this.currentUser!} addNewComment={(newComment) => this.onAddNewComment(newComment)} />;\n\n            default:\n                return <PtItemDetailsComponent item={item} users$={this.users$} usersRequested={() => this.onUsersRequested()} itemSaved={(item) => this.onItemSaved(item)} />;\n        }\n    }\n\n\n\n    public render() {\n        const item = this.state.item;\n\n        if (!item) {\n            return null;\n        }\n        return (\n\n            <div>\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3\">\n                    <h1 className=\"h2\">{item.title}</h1>\n                    <div className=\"btn-toolbar mb-2 mb-md-0\">\n                        <div className=\"btn-group mr-2\">\n                            <button type=\"button\" onClick={(e) => this.onScreenSelected('details')} className={'btn btn-sm btn-outline-secondary ' + this.state.selectedDetailsScreen === 'details' ? 'active' : ''}>Details</button>\n\n                            <button type=\"button\" onClick={(e) => this.onScreenSelected('tasks')} className={\"btn btn-sm btn-outline-secondary \" + this.state.selectedDetailsScreen === 'tasks' ? 'active' : ''}>Tasks</button>\n\n                            <button type=\"button\" onClick={(e) => this.onScreenSelected('chitchat')} className={\"btn btn-sm btn-outline-secondary \" + this.state.selectedDetailsScreen === 'chitchat' ? 'active' : ''}>Chitchat</button>\n                        </div>\n                    </div>\n                </div>\n\n                {this.screenRender(this.state.selectedDetailsScreen, item)}\n\n            </div>\n        );\n    }\n}\n","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\services\\backlog.service.ts",["158","159","160","161"],"import { Store } from '../../../core/state/app-store';\nimport { BacklogRepository } from '../repositories/backlog.repository';\n\nimport { PtItem, PtUser, PtTask, PtComment } from '../../../core/models/domain';\n\nimport { PriorityEnum, StatusEnum } from '../../../core/models/domain/enums';\nimport { getUserAvatarUrl } from '../../../core/helpers/user-avatar-helper';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { CONFIG } from '../../../config';\nimport { PresetType } from '../../../core/models/domain/types';\nimport { datesForTask, datesForPtItem } from '../../../core/helpers/date-utils';\nimport { PtNewItem } from '../../../shared/models/dto/pt-new-item';\nimport { PtNewTask } from '../../../shared/models/dto/pt-new-task';\nimport { PtNewComment } from '../../../shared/models/dto/pt-new-comment';\n\n\nexport const tempCurrentUser = {\n    avatar: getUserAvatarUrl(CONFIG.apiEndpoint, 21),\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    fullName: 'Alex Ziskind',\n    id: 21\n};\n\n\nexport class BacklogService {\n\n\n    private get currentPreset() {\n        return this.store.value.selectedPreset;\n    }\n\n    private get currentUserId() {\n        if (this.store.value.currentUser) {\n            return this.store.value.currentUser.id;\n        } else {\n            return undefined;\n        }\n    }\n\n\n    constructor(\n        private repo: BacklogRepository,\n        private store: Store\n    ) {\n        this.store.value.currentUser = tempCurrentUser;\n    }\n\n    public getItems(preset: PresetType): Promise<PtItem[]> {\n        return this.repo.getPtItems(preset, this.currentUserId)\n            .then((ptItems: PtItem[]) => {\n\n                ptItems.forEach(i => {\n                    datesForPtItem(i);\n                    this.setUserAvatarUrl(i.assignee);\n                    i.comments.forEach(c => this.setUserAvatarUrl(c.user));\n                });\n                return ptItems;\n            });\n    }\n\n    /*\n    public getItemFromCacheOrServer(id: number) {\n        // const selectedItem = _.find(this.store.value.backlogItems, i => i.id === id);\n        const selectedItem = this.store.value.backlogItems.find(i => i.id === id);\n        if (selectedItem) {\n\n            this.store.set('currentSelectedItem', selectedItem);\n\n        } else {\n            this.getPtItem(id);\n        }\n    }\n*/\n\n\n    public getPtItem(id: number): Promise<PtItem> {\n        return this.repo.getPtItem(id)\n            .then((ptItem: PtItem) => {\n                datesForPtItem(ptItem);\n                this.setUserAvatarUrl(ptItem.assignee);\n                ptItem.comments.forEach(c => this.setUserAvatarUrl(c.user));\n                ptItem.tasks.forEach(t => datesForTask(t));\n                return ptItem;\n            });\n    }\n\n\n    public addNewPtItem(newItem: PtNewItem, assignee: PtUser): Promise<PtItem> {\n        const item: PtItem = {\n            id: 0,\n            title: newItem.title,\n            description: newItem.description,\n            type: newItem.typeStr,\n            estimate: 0,\n            priority: PriorityEnum.Medium,\n            status: StatusEnum.Open,\n            assignee: assignee,\n            tasks: [],\n            comments: [],\n            dateCreated: new Date(),\n            dateModified: new Date()\n        };\n        return new Promise<PtItem>((resolve, reject) => {\n            this.repo.insertPtItem(item)\n                .then((nextItem: PtItem) => {\n                    datesForPtItem(nextItem);\n                    this.setUserAvatar(nextItem.assignee);\n\n                    nextItem.tasks.forEach(t => datesForTask(t));\n                    resolve(nextItem);\n                });\n        });\n    }\n\n\n    public updatePtItem(item: PtItem): Promise<PtItem> {\n        return this.repo.updatePtItem(item);\n    }\n\n    /*\n\n    public deletePtItem(item: PtItem) {\n        this.repo.deletePtItem(item.id,\n            () => {\n\n                const updatedItems = this.store.value.backlogItems.filter((i) => {\n                    return i.id !== item.id;\n                });\n                this.store.set('backlogItems', updatedItems);\n\n            }\n        );\n    }\n*/\n\n    public addNewPtTask(newTask: PtNewTask, currentItem: PtItem): Promise<PtTask> {\n        const task: PtTask = {\n            id: 0,\n            title: newTask.title,\n            completed: false,\n            dateCreated: new Date(),\n            dateModified: new Date(),\n            dateStart: newTask.dateStart ? newTask.dateStart : undefined,\n            dateEnd: newTask.dateEnd ? newTask.dateEnd : undefined\n        };\n        return new Promise<PtTask>((resolve, reject) => {\n            this.repo.insertPtTask(\n                task,\n                currentItem.id)\n                .then((nextTask: PtTask) => {\n                    datesForTask(nextTask);\n                    resolve(nextTask);\n                }\n                );\n        });\n    }\n\n\n    public updatePtTask(currentItem: PtItem, task: PtTask, toggle: boolean, newTitle?: string): Promise<PtTask> {\n        const taskToUpdate: PtTask = {\n            id: task.id,\n            title: newTitle ? newTitle : task.title,\n            completed: toggle ? !task.completed : task.completed,\n            dateCreated: task.dateCreated,\n            dateModified: new Date(),\n            dateStart: task.dateStart ? task.dateStart : undefined,\n            dateEnd: task.dateEnd ? task.dateEnd : undefined\n        };\n        return new Promise<PtTask>((resolve, reject) => {\n            this.repo.updatePtTask(\n                taskToUpdate,\n                currentItem.id)\n                .then((updatedTask: PtTask) => {\n                    datesForTask(updatedTask);\n                    resolve(updatedTask);\n                }\n                );\n        });\n    }\n\n    public deletePtTask(currentItem: PtItem, task: PtTask): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.repo.deletePtTask(task, currentItem.id)\n                .then((ok: boolean) => {\n                    const updatedTasks = currentItem.tasks.filter(t => {\n                        if (t.id !== task.id) {\n                            return t;\n                        }\n                    });\n                    currentItem.tasks = updatedTasks;\n                    resolve(ok);\n                }\n                );\n        });\n    }\n\n    public addNewPtComment(newComment: PtNewComment, currentItem: PtItem): Promise<PtComment> {\n        const comment: PtComment = {\n            id: 0,\n            title: newComment.title,\n            user: this.store.value.currentUser,\n            dateCreated: new Date(),\n            dateModified: new Date()\n        };\n        return new Promise<PtComment>((resolve, reject) => {\n            this.repo.insertPtComment(\n                comment,\n                currentItem.id\n            )\n                .then((nextComment: PtComment) => {\n                    resolve(nextComment);\n                }\n                );\n        });\n    }\n\n    private setUserAvatarUrl(user: PtUser | undefined) {\n        if (user) {\n            user.avatar = `${CONFIG.apiEndpoint}/photo/${user.id}`;\n        }\n    }\n\n    private setUserAvatar(user: PtUser) {\n        user.avatar = getUserAvatarUrl(CONFIG.apiEndpoint, user.id);\n    }\n\n}\n","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\dashboard\\repositories\\dashboard.repository.ts",["162"],"import { StatusCounts, PriorityCounts, TypeCounts } from '../models';\nimport { CONFIG } from '../../../config';\nimport { PtItem } from '../../../core/models/domain';\n\n\nexport interface DashboardFilter {\n    userId?: number;\n    dateStart?: Date;\n    dateEnd?: Date;\n}\n\nexport interface ItemsForMonth {\n    closed: PtItem[];\n    open: PtItem[];\n}\n\nexport interface FilteredIssues {\n    categories: Date[];\n    items: ItemsForMonth[];\n}\n\nexport class DashboardRepository {\n    constructor() { }\n\n    private getFilterParamString(filter: DashboardFilter): string {\n        const params = [\n            filter.userId ? `userId=${filter.userId}` : '',\n            filter.dateStart ? `dateStart=${filter.dateStart.toDateString()}` : '',\n            filter.dateEnd ? `dateEnd=${filter.dateEnd.toDateString()}` : ''\n        ];\n        const paramStr = params.join('&');\n        return paramStr;\n    }\n    private getStatusCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/statuscounts?${paramStr}`;\n    }\n\n    private getPriorityCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/prioritycounts?${paramStr}`;\n    }\n\n    private getTypeCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/prioritycounts?${paramStr}`;\n    }\n\n    private getFilteredIssuesUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/filteredissues?${paramStr}`;\n    }\n\n    public getStatusCounts(filter: DashboardFilter): Promise<StatusCounts> {\n        return fetch(this.getStatusCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getPriorityCounts(filter: DashboardFilter): Promise<PriorityCounts> {\n        return fetch(this.getPriorityCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getTypeCounts(filter: DashboardFilter): Promise<TypeCounts> {\n        return fetch(this.getTypeCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getFilteredIssues(filter: DashboardFilter): Promise<FilteredIssues> {\n        return fetch(this.getFilteredIssuesUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n}\n","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\helpers\\priority-styling.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\dashboard\\services\\dashboard.service.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\helpers\\date-utils.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\services\\pt-user-service.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\repositories\\backlog.repository.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\state\\app-store.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\components\\preset-filter\\preset-filter.tsx",["163","164"],"import React, { ReactNode } from \"react\";\nimport { PresetType } from \"../../../core/models/domain/types\";\n\n\ninterface AppPresetFilterProps {\n    selectedPreset: PresetType;\n    onSelectPresetTap: (preset: PresetType) => void;\n}\n\nexport class AppPresetFilter extends React.PureComponent<AppPresetFilterProps, any> {\n\n    constructor(props: AppPresetFilterProps) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div className=\"btn-group mr-2\">\n                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={(e) => this.props.onSelectPresetTap('my')}>My Items</button>\n                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={(e) => this.props.onSelectPresetTap('open')} > Open Items</button >\n                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={(e) => this.props.onSelectPresetTap('closed')} > Done Items</button >\n            </div >\n        );\n    }\n};\n","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\components\\item-details\\pt-item-details.tsx",["165","166","167","168"],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\dashboard\\components\\active-issues\\active-issues.tsx",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\components\\item-chitchat\\pt-item-chitchat.tsx",["169","170"],"import React from \"react\";\nimport { PtComment, PtUser } from \"../../../../core/models/domain\";\nimport { EMPTY_STRING } from \"../../../../core/helpers\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { PtNewComment } from \"../../../../shared/models/dto/pt-new-comment\";\n\nimport './pt-item-chitchat.css';\n\ninterface PtItemChitchatComponentProps {\n    comments$: BehaviorSubject<PtComment[]>;\n    currentUser: PtUser;\n    addNewComment: (newComment: PtNewComment) => void;\n}\n\ninterface PtItemChitchatComponentState {\n    newCommentText: string;\n    comments: PtComment[];\n}\n\nexport class PtItemChitchatComponent extends React.Component<PtItemChitchatComponentProps, PtItemChitchatComponentState> {\n\n    constructor(props: PtItemChitchatComponentProps) {\n        super(props);\n        this.state = {\n            newCommentText: EMPTY_STRING,\n            comments: []\n        };\n    }\n\n    public componentDidMount() {\n        this.props.comments$.subscribe((comments: PtComment[]) => {\n            this.setState({\n                comments: comments\n            });\n        });\n    }\n\n    public onNewCommentChanged(e: any) {\n        this.setState({\n            newCommentText: e.target.value\n        });\n    }\n\n    public onAddTapped() {\n        const newTitle = this.state.newCommentText.trim();\n        if (newTitle.length === 0) {\n            return;\n        }\n        const newComment: PtNewComment = {\n            title: newTitle\n        };\n        this.props.addNewComment(newComment);\n\n        this.setState({\n            newCommentText: EMPTY_STRING\n        });\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <form>\n                    <div className=\"form-row align-items-center\">\n\n                        <img src={this.props.currentUser.avatar} className=\"mr-3 li-avatar rounded\" />\n\n                        <div className=\"col-sm-6\">\n                            <textarea defaultValue={this.state.newCommentText} onChange={(e) => this.onNewCommentChanged(e)} placeholder=\"Enter new comment...\" className=\"form-control pt-text-comment-add\"\n                                name=\"newComment\"></textarea>\n                        </div>\n                        <button type=\"button\" onClick={() => this.onAddTapped()} className=\"btn btn-primary\" disabled={!this.state.newCommentText}>Add</button>\n                    </div>\n                </form >\n\n                <hr />\n\n                <ul className=\"list-unstyled\">\n                    {\n                        this.state.comments.map(comment => {\n                            return (\n                                <li key={comment.id} className=\"media chitchat-item\">\n                                    <img src={comment.user!.avatar} className=\"mr-3 li-avatar rounded\" />\n                                    <div className=\"media-body\">\n                                        <h6 className=\"mt-0 mb-1\"><span>{comment.user!.fullName}</span><span className=\"li-date\">{comment.dateCreated}</span></h6>\n\n                                        <span className=\"chitchat-text \">{comment.title}</span>\n\n                                    </div>\n                                </li>\n                            );\n                        })\n                    }\n                </ul>\n            </React.Fragment >\n        );\n    }\n}\n","C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\modules\\backlog\\components\\item-tasks\\pt-item-tasks.tsx",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\constants\\index.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\helpers\\index.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\helpers\\user-avatar-helper.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\config.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\state\\app-state.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\shared\\models\\forms\\pt-item-details-edit-form.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\helpers\\string-helpers.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\constants\\pt-item-types.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\constants\\pt-item-statuses.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\models\\domain\\enums\\index.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\models\\domain\\enums\\item-type-enum.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\models\\domain\\enums\\item-status.enum.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\models\\domain\\enums\\item-priority.enum.ts",[],"C:\\Users\\juanignacio.moreno\\Documents\\Telerik\\Curso1\\rpstrackerreact\\src\\core\\constants\\pt-item-priorities.ts",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":8,"column":5,"nodeType":"177","messageId":"178","endLine":10,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":15,"column":17,"nodeType":"181","endLine":15,"endColumn":68},{"ruleId":"182","severity":1,"message":"183","line":16,"column":21,"nodeType":"181","endLine":16,"endColumn":75},{"ruleId":"184","severity":1,"message":"185","line":17,"column":17,"nodeType":"186","messageId":"187","endLine":17,"endColumn":28},{"ruleId":"182","severity":1,"message":"183","line":137,"column":13,"nodeType":"181","endLine":137,"endColumn":77},{"ruleId":"182","severity":1,"message":"183","line":140,"column":13,"nodeType":"181","endLine":143,"endColumn":15},{"ruleId":"188","severity":1,"message":"189","line":106,"column":72,"nodeType":"190","messageId":"191","endLine":106,"endColumn":74},{"ruleId":"184","severity":1,"message":"192","line":8,"column":10,"nodeType":"186","messageId":"187","endLine":8,"endColumn":20},{"ruleId":"184","severity":1,"message":"193","line":9,"column":10,"nodeType":"186","messageId":"187","endLine":9,"endColumn":13},{"ruleId":"184","severity":1,"message":"194","line":9,"column":15,"nodeType":"186","messageId":"187","endLine":9,"endColumn":18},{"ruleId":"188","severity":1,"message":"189","line":188,"column":69,"nodeType":"190","messageId":"191","endLine":188,"endColumn":71},{"ruleId":"175","severity":1,"message":"176","line":23,"column":5,"nodeType":"177","messageId":"178","endLine":23,"endColumn":22},{"ruleId":"184","severity":1,"message":"195","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"175","severity":1,"message":"176","line":12,"column":5,"nodeType":"177","messageId":"178","endLine":14,"endColumn":6},{"ruleId":"184","severity":1,"message":"196","line":19,"column":3,"nodeType":"186","messageId":"187","endLine":19,"endColumn":9},{"ruleId":"184","severity":1,"message":"197","line":20,"column":3,"nodeType":"186","messageId":"187","endLine":20,"endColumn":21},{"ruleId":"182","severity":1,"message":"183","line":248,"column":15,"nodeType":"181","endLine":251,"endColumn":17},{"ruleId":"182","severity":1,"message":"183","line":293,"column":23,"nodeType":"181","endLine":296,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":65,"column":25,"nodeType":"181","endLine":65,"endColumn":103},{"ruleId":"182","severity":1,"message":"183","line":82,"column":37,"nodeType":"181","endLine":82,"endColumn":106},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","@typescript-eslint/no-unused-vars","'ModalHeader' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Observable' is defined but never used.","'map' is defined but never used.","'tap' is defined but never used.","'ReactNode' is defined but never used.","'Button' is defined but never used.","'ListGroupItemProps' is defined but never used.","no-global-assign","no-unsafe-negation"]